// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: email_query.sql

package repository

import (
	"context"
	"time"
)

const createEmail = `-- name: CreateEmail :one
INSERT INTO email (seq, sender, subject, email_date) VALUES (?, ?, ?, ?) RETURNING id, seq, sender, subject, email_date, created_at
`

type CreateEmailParams struct {
	Seq       int64
	Sender    string
	Subject   string
	EmailDate time.Time
}

func (q *Queries) CreateEmail(ctx context.Context, arg CreateEmailParams) (Email, error) {
	row := q.db.QueryRowContext(ctx, createEmail,
		arg.Seq,
		arg.Sender,
		arg.Subject,
		arg.EmailDate,
	)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.Seq,
		&i.Sender,
		&i.Subject,
		&i.EmailDate,
		&i.CreatedAt,
	)
	return i, err
}

const getEmailById = `-- name: GetEmailById :one
SELECT id, seq, sender, subject, email_date, created_at FROM email WHERE id = ? LIMIT 1
`

func (q *Queries) GetEmailById(ctx context.Context, id int64) (Email, error) {
	row := q.db.QueryRowContext(ctx, getEmailById, id)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.Seq,
		&i.Sender,
		&i.Subject,
		&i.EmailDate,
		&i.CreatedAt,
	)
	return i, err
}
